package net.araim.tictactoe.activities;

import net.araim.tictactoe.Board;
import net.araim.tictactoe.CurrentGameSettings;
import net.araim.tictactoe.IBoard;
import net.araim.tictactoe.IMoveObserver;
import net.araim.tictactoe.R;
import net.araim.tictactoe.XO;
import net.araim.tictactoe.AI.AiPlayer;
import net.araim.tictactoe.bluetooth.IBluetoothSocketManager;
import net.araim.tictactoe.configuration.Settings;
import net.araim.tictactoe.utils.Consts;
import net.araim.tictactoe.views.BoardView;
import net.araim.tictactoe.views.IBoardViewController;
import android.app.Activity;
import android.bluetooth.BluetoothSocket;
import android.content.Intent;
import android.graphics.Point;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.RelativeLayout;

import com.admob.android.ads.AdListener;
import com.admob.android.ads.AdView;
import com.admob.android.ads.InterstitialAd;
import com.admob.android.ads.InterstitialAdListener;

public class TicTacToeMain extends Activity implements AdListener, InterstitialAdListener, IBluetoothSocketManager, IBoardViewController,
		IMoveObserver {

	private static final String TAG = "TicTAcToeMain";
//	private BluetoothAdapter mBluetoothAdapter;
	// private BluetoothListener lsnr;
	private BoardView bv;
	private IBoard<XO> board;
	private XO turn = XO.O; // o's start
	private AiPlayer playa = new AiPlayer();

	private Point winnerPointStart = new Point();
	private Point winnerPointEnd = new Point();

	// Create a BroadcastReceiver for ACTION_FOUND
	// private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
	// public void onReceive(Context context, Intent intent) {
	// String action = intent.getAction();
	// // When discovery finds a device
	// if (BluetoothDevice.ACTION_FOUND.equals(action)) {
	// // Get the BluetoothDevice object from the Intent
	// BluetoothDevice device =
	// intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
	// // Add the name and address to an array adapter to show in a
	// // ListView
	//
	// // device.getAddress();
	// lsnr = new BluetoothListener(mBluetoothAdapter);
	// lsnr.start();
	// }
	// }
	// };

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		if (savedInstanceState != null) {
			if (savedInstanceState != null && savedInstanceState.containsKey(Consts.CURRENT_GAME_BOARD)) {
				board = savedInstanceState.getParcelable(Consts.CURRENT_GAME_BOARD);
			} else {
				Log.w(TAG, "Colud not recover board state from saved instance");
				// TODO: restart game here (?)
			}
			if (savedInstanceState != null && savedInstanceState.containsKey(Consts.CURRENT_GAME_SETTINGS)) {
				CurrentGameSettings.adopt((CurrentGameSettings) savedInstanceState.getParcelable(Consts.CURRENT_GAME_SETTINGS));
			} else {
				Log.w(TAG, "Colud not recover config from saved instance");
			}
			if (savedInstanceState != null && savedInstanceState.containsKey(Consts.CURRENT_GAME_TURN)) {
				turn = XO.parse(savedInstanceState.getInt(Consts.CURRENT_GAME_TURN));

			} else {
				Log.w(TAG, "Colud not recover turn information from saved instance");
			}
		} else {
			board = new Board();
		}
		bv = new BoardView(this, board);
		bv.setBoardControler(this);

		playa.setMoveObserver(this);

		((RelativeLayout) findViewById(R.id.MainLayout)).addView(bv);
		findViewById(R.id.zoomPlus).setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				Log.d(TAG, "zoomclicked");
				bv.setZoom(bv.getZoom() + 0.1f);
			}
		});
		findViewById(R.id.zoomPlus).bringToFront();
		// AdManager.setTestDevices( new String[] { AdManager.TEST_EMULATOR } );
		// AdView ad = (AdView) findViewById(R.id.ad);
		// ad.setAdListener(new TicTacToeAdListener());
		// InterstitialAd interstitial = new InterstitialAd(Event.SCREEN_CHANGE,
		// this);
		// interstitial.requestAd(this); //request an ad now so it's ready when
		// we want to show it

		// mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
		// if (mBluetoothAdapter != null) {
		// if (!mBluetoothAdapter.isEnabled()) {
		// Intent enableBtIntent = new Intent(
		// BluetoothAdapter.ACTION_REQUEST_ENABLE);
		// startActivityForResult(enableBtIntent, 3);
		// }
		// }
		//
		// // Register the BroadcastReceiver
		// IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
		// registerReceiver(mReceiver, filter); // Don't forget to unregister
		// during onDestroy
		//
		// Intent discoverableIntent = new
		// Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);
		// discoverableIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION,
		// 300);
		// startActivity(discoverableIntent);

		// btdevs();
	}

//	private void btdevs() {
//		Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();
//		// If there are paired devices
//		if (pairedDevices.size() > 0) {
//			// Loop through paired devices
//			for (BluetoothDevice device : pairedDevices) {
//				// Add the name and address to an array adapter to show in a
//				// ListView
//				String addr = device.getAddress();
//			}
//		}
//	}

	@Override
	protected void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);
		outState.putParcelable(Consts.CURRENT_GAME_BOARD, board);
		outState.putParcelable(Consts.CURRENT_GAME_SETTINGS, CurrentGameSettings.getInstance());
		outState.putInt(Consts.CURRENT_GAME_TURN, turn.intValue());
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
//		btdevs();
	}

	@Override
	public void onFailedToReceiveInterstitial(InterstitialAd arg0) {

	}

	@Override
	public void onReceiveInterstitial(InterstitialAd arg0) {
		arg0.show(this);

	}

	@Override
	public void onFailedToReceiveAd(AdView arg0) {

	}

	@Override
	public void onFailedToReceiveRefreshedAd(AdView arg0) {

	}

	@Override
	public void onReceiveAd(AdView arg0) {

	}

	@Override
	public void onReceiveRefreshedAd(AdView arg0) {

	}

	@Override
	public void processSocket(BluetoothSocket bs) {
		// bs.

	}

	@Override
	public void elementClicked(int x, int y) {
		if (bv.Set(x, y, turn, Settings.requiresConfirmation, Settings.confirmationTime * 1000)) {
			if (checkWinnings(x, y, turn, winnerPointStart, winnerPointEnd)) {
				processWining(new Point(x, y), turn);
			} else {
				// playa.notifyOponentMove(new Point(x, y), board);
			}
			changeTurns();

		}
	}

	private void processWining(Point point, XO turn2) {
		bv.setLocked(true);
	}

	private void changeTurns() {
		turn = (turn == XO.X ? XO.O : XO.X);
		// if (turn == playa.getPlayersXO()) {
		// playa.turnChange(board);
		// turn = (turn == XO.X ? XO.O : XO.X);
		// }
	}

	private boolean checkWinnings(int i, int j, XO who, Point p1, Point p2) {
		int startRow = i - CurrentGameSettings.getInstance().winSize + 1;
		int endRow = i + CurrentGameSettings.getInstance().winSize - 1;

		// check to left and to right / up and down
		// check diagonal

		int count = 0;
		for (int x = startRow; x <= endRow; x++) {
			XO xo = board.get(x, j);
			if (xo == null || xo != who) {
				count = 0;
			} else if (++count >= CurrentGameSettings.getInstance().winSize) {
				if (p1 != null) {
					p1.set(x - CurrentGameSettings.getInstance().winSize + 1, j);
				}
				if (p2 != null) {
					p2.set(x, j);
				}
				return true;
			}
		}

		int startCol = j - CurrentGameSettings.getInstance().winSize + 1;
		int endCol = j + CurrentGameSettings.getInstance().winSize - 1;
		count = 0;
		for (int y = startCol; y <= endCol; y++) {
			XO xo = board.get(i, y);
			if (xo == null || xo != who) {
				count = 0;
			} else if (++count >= CurrentGameSettings.getInstance().winSize) {
				if (p1 != null) {
					p1.set(i, y - CurrentGameSettings.getInstance().winSize + 1);
				}
				if (p2 != null) {
					p2.set(i, y);
				}
				return true;
			}
		}

		// check diagonal
		int countD1 = 0;
		int countD2 = 0;

		for (int x = startRow, y = startCol; x <= endRow && y <= endCol; x++, y++) {
			XO xo = board.get(x, y);
			if (xo == null || xo != who) {
				countD1 = 0;
			} else if (++countD1 >= CurrentGameSettings.getInstance().winSize) {
				if (p1 != null) {
					p1.set(x - CurrentGameSettings.getInstance().winSize + 1, y - CurrentGameSettings.getInstance().winSize + 1);
				}
				if (p2 != null) {
					p2.set(x, y);
				}
				return true;
			}

			xo = board.get(x, endCol + startCol - y);
			if (xo == null || xo != who) {
				countD2 = 0;
			} else if (++countD2 >= CurrentGameSettings.getInstance().winSize) {
				if (p1 != null) {
					p1.set(x - CurrentGameSettings.getInstance().winSize + 1, endCol + startCol - y
							+ CurrentGameSettings.getInstance().winSize - 1);
				}
				if (p2 != null) {
					p2.set(x, endCol + startCol - y);
				}
				return true;

			}
		}

		return false;
	}

	@Override
	public void moveMade(Point p) {
	}

}